// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using XurClassLibrary.Models.NDestinyInventoryItemDefinition;
//
//    var nDestinyInventoryItemDefinition = NDestinyInventoryItemDefinition.FromJson(jsonString);

using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace XurClassLibrary.Models.NDestinyInventoryItemDefinition
{
    public partial class NDestinyInventoryItemDefinition
    {
        [JsonProperty("displayProperties", NullValueHandling = NullValueHandling.Ignore)]
        public DisplayProperties DisplayProperties { get; set; }

        [JsonProperty("tooltipNotifications", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> TooltipNotifications { get; set; }

        [JsonProperty("collectibleHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? CollectibleHash { get; set; }

        [JsonProperty("backgroundColor", NullValueHandling = NullValueHandling.Ignore)]
        public BackgroundColor BackgroundColor { get; set; }

        [JsonProperty("screenshot", NullValueHandling = NullValueHandling.Ignore)]
        public string Screenshot { get; set; }

        [JsonProperty("itemTypeDisplayName", NullValueHandling = NullValueHandling.Ignore)]
        public string ItemTypeDisplayName { get; set; }

        [JsonProperty("uiItemDisplayStyle", NullValueHandling = NullValueHandling.Ignore)]
        public string UiItemDisplayStyle { get; set; }

        [JsonProperty("itemTypeAndTierDisplayName", NullValueHandling = NullValueHandling.Ignore)]
        public string ItemTypeAndTierDisplayName { get; set; }

        [JsonProperty("displaySource", NullValueHandling = NullValueHandling.Ignore)]
        public string DisplaySource { get; set; }

        [JsonProperty("action", NullValueHandling = NullValueHandling.Ignore)]
        public Action Action { get; set; }

        [JsonProperty("inventory", NullValueHandling = NullValueHandling.Ignore)]
        public Inventory Inventory { get; set; }

        [JsonProperty("stats", NullValueHandling = NullValueHandling.Ignore)]
        public Stats Stats { get; set; }

        [JsonProperty("equippingBlock", NullValueHandling = NullValueHandling.Ignore)]
        public EquippingBlock EquippingBlock { get; set; }

        [JsonProperty("translationBlock", NullValueHandling = NullValueHandling.Ignore)]
        public TranslationBlock TranslationBlock { get; set; }

        [JsonProperty("preview", NullValueHandling = NullValueHandling.Ignore)]
        public Preview Preview { get; set; }

        [JsonProperty("quality", NullValueHandling = NullValueHandling.Ignore)]
        public Quality Quality { get; set; }

        [JsonProperty("sourceData", NullValueHandling = NullValueHandling.Ignore)]
        public SourceData SourceData { get; set; }

        [JsonProperty("acquireRewardSiteHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? AcquireRewardSiteHash { get; set; }

        [JsonProperty("acquireUnlockHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? AcquireUnlockHash { get; set; }

        [JsonProperty("sockets", NullValueHandling = NullValueHandling.Ignore)]
        public Sockets Sockets { get; set; }

        [JsonProperty("talentGrid", NullValueHandling = NullValueHandling.Ignore)]
        public TalentGrid TalentGrid { get; set; }

        [JsonProperty("investmentStats", NullValueHandling = NullValueHandling.Ignore)]
        public List<InvestmentStat> InvestmentStats { get; set; }

        [JsonProperty("perks", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Perks { get; set; }

        [JsonProperty("summaryItemHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? SummaryItemHash { get; set; }

        [JsonProperty("allowActions", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AllowActions { get; set; }

        [JsonProperty("doesPostmasterPullHaveSideEffects", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DoesPostmasterPullHaveSideEffects { get; set; }

        [JsonProperty("nonTransferrable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NonTransferrable { get; set; }

        [JsonProperty("itemCategoryHashes", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> ItemCategoryHashes { get; set; }

        [JsonProperty("specialItemType", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpecialItemType { get; set; }

        [JsonProperty("itemType", NullValueHandling = NullValueHandling.Ignore)]
        public long? ItemType { get; set; }

        [JsonProperty("itemSubType", NullValueHandling = NullValueHandling.Ignore)]
        public long? ItemSubType { get; set; }

        [JsonProperty("classType", NullValueHandling = NullValueHandling.Ignore)]
        public long? ClassType { get; set; }

        [JsonProperty("breakerType", NullValueHandling = NullValueHandling.Ignore)]
        public long? BreakerType { get; set; }

        [JsonProperty("equippable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Equippable { get; set; }

        [JsonProperty("damageTypeHashes", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> DamageTypeHashes { get; set; }

        [JsonProperty("damageTypes", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> DamageTypes { get; set; }

        [JsonProperty("defaultDamageType", NullValueHandling = NullValueHandling.Ignore)]
        public long? DefaultDamageType { get; set; }

        [JsonProperty("defaultDamageTypeHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? DefaultDamageTypeHash { get; set; }

        [JsonProperty("isWrapper", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsWrapper { get; set; }

        [JsonProperty("hash", NullValueHandling = NullValueHandling.Ignore)]
        public long? Hash { get; set; }

        [JsonProperty("index", NullValueHandling = NullValueHandling.Ignore)]
        public long? Index { get; set; }

        [JsonProperty("redacted", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        [JsonProperty("blacklisted", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Blacklisted { get; set; }
    }

    public class Action
    {
        [JsonProperty("verbName", NullValueHandling = NullValueHandling.Ignore)]
        public string VerbName { get; set; }

        [JsonProperty("verbDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string VerbDescription { get; set; }

        [JsonProperty("isPositive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsPositive { get; set; }

        [JsonProperty("requiredCooldownSeconds", NullValueHandling = NullValueHandling.Ignore)]
        public long? RequiredCooldownSeconds { get; set; }

        [JsonProperty("requiredItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> RequiredItems { get; set; }

        [JsonProperty("progressionRewards", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> ProgressionRewards { get; set; }

        [JsonProperty("actionTypeLabel", NullValueHandling = NullValueHandling.Ignore)]
        public string ActionTypeLabel { get; set; }

        [JsonProperty("rewardSheetHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? RewardSheetHash { get; set; }

        [JsonProperty("rewardItemHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? RewardItemHash { get; set; }

        [JsonProperty("rewardSiteHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? RewardSiteHash { get; set; }

        [JsonProperty("requiredCooldownHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? RequiredCooldownHash { get; set; }

        [JsonProperty("deleteOnAction", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DeleteOnAction { get; set; }

        [JsonProperty("consumeEntireStack", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ConsumeEntireStack { get; set; }

        [JsonProperty("useOnAcquire", NullValueHandling = NullValueHandling.Ignore)]
        public bool? UseOnAcquire { get; set; }
    }

    public class BackgroundColor
    {
        [JsonProperty("colorHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? ColorHash { get; set; }

        [JsonProperty("red", NullValueHandling = NullValueHandling.Ignore)]
        public long? Red { get; set; }

        [JsonProperty("green", NullValueHandling = NullValueHandling.Ignore)]
        public long? Green { get; set; }

        [JsonProperty("blue", NullValueHandling = NullValueHandling.Ignore)]
        public long? Blue { get; set; }

        [JsonProperty("alpha", NullValueHandling = NullValueHandling.Ignore)]
        public long? Alpha { get; set; }
    }

    public class DisplayProperties
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [JsonProperty("hasIcon", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasIcon { get; set; }
    }

    public class EquippingBlock
    {
        [JsonProperty("uniqueLabelHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? UniqueLabelHash { get; set; }

        [JsonProperty("equipmentSlotTypeHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? EquipmentSlotTypeHash { get; set; }

        [JsonProperty("attributes", NullValueHandling = NullValueHandling.Ignore)]
        public long? Attributes { get; set; }

        [JsonProperty("equippingSoundHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? EquippingSoundHash { get; set; }

        [JsonProperty("hornSoundHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? HornSoundHash { get; set; }

        [JsonProperty("ammoType", NullValueHandling = NullValueHandling.Ignore)]
        public long? AmmoType { get; set; }

        [JsonProperty("displayStrings", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> DisplayStrings { get; set; }
    }

    public class Inventory
    {
        [JsonProperty("maxStackSize", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxStackSize { get; set; }

        [JsonProperty("bucketTypeHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? BucketTypeHash { get; set; }

        [JsonProperty("recoveryBucketTypeHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? RecoveryBucketTypeHash { get; set; }

        [JsonProperty("tierTypeHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? TierTypeHash { get; set; }

        [JsonProperty("isInstanceItem", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsInstanceItem { get; set; }

        [JsonProperty("nonTransferrableOriginal", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NonTransferrableOriginal { get; set; }

        [JsonProperty("tierTypeName", NullValueHandling = NullValueHandling.Ignore)]
        public string TierTypeName { get; set; }

        [JsonProperty("tierType", NullValueHandling = NullValueHandling.Ignore)]
        public long? TierType { get; set; }

        [JsonProperty("expirationTooltip", NullValueHandling = NullValueHandling.Ignore)]
        public string ExpirationTooltip { get; set; }

        [JsonProperty("expiredInActivityMessage", NullValueHandling = NullValueHandling.Ignore)]
        public string ExpiredInActivityMessage { get; set; }

        [JsonProperty("expiredInOrbitMessage", NullValueHandling = NullValueHandling.Ignore)]
        public string ExpiredInOrbitMessage { get; set; }

        [JsonProperty("suppressExpirationWhenObjectivesComplete", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SuppressExpirationWhenObjectivesComplete { get; set; }
    }

    public class InvestmentStat
    {
        [JsonProperty("statTypeHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? StatTypeHash { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public long? Value { get; set; }

        [JsonProperty("isConditionallyActive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsConditionallyActive { get; set; }
    }

    public class Preview
    {
        [JsonProperty("screenStyle", NullValueHandling = NullValueHandling.Ignore)]
        public string ScreenStyle { get; set; }

        [JsonProperty("previewVendorHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? PreviewVendorHash { get; set; }

        [JsonProperty("previewActionString", NullValueHandling = NullValueHandling.Ignore)]
        public string PreviewActionString { get; set; }
    }

    public class Quality
    {
        [JsonProperty("itemLevels", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> ItemLevels { get; set; }

        [JsonProperty("qualityLevel", NullValueHandling = NullValueHandling.Ignore)]
        public long? QualityLevel { get; set; }

        [JsonProperty("infusionCategoryName", NullValueHandling = NullValueHandling.Ignore)]
        public string InfusionCategoryName { get; set; }

        [JsonProperty("infusionCategoryHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? InfusionCategoryHash { get; set; }

        [JsonProperty("infusionCategoryHashes", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> InfusionCategoryHashes { get; set; }

        [JsonProperty("progressionLevelRequirementHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? ProgressionLevelRequirementHash { get; set; }
    }

    public class Sockets
    {
        [JsonProperty("detail", NullValueHandling = NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [JsonProperty("socketEntries", NullValueHandling = NullValueHandling.Ignore)]
        public List<SocketEntry> SocketEntries { get; set; }

        [JsonProperty("intrinsicSockets", NullValueHandling = NullValueHandling.Ignore)]
        public List<IntrinsicSocket> IntrinsicSockets { get; set; }

        [JsonProperty("socketCategories", NullValueHandling = NullValueHandling.Ignore)]
        public List<SocketCategory> SocketCategories { get; set; }
    }

    public class IntrinsicSocket
    {
        [JsonProperty("plugItemHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? PlugItemHash { get; set; }

        [JsonProperty("socketTypeHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? SocketTypeHash { get; set; }

        [JsonProperty("defaultVisible", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DefaultVisible { get; set; }
    }

    public class SocketCategory
    {
        [JsonProperty("socketCategoryHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? SocketCategoryHash { get; set; }

        [JsonProperty("socketIndexes", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> SocketIndexes { get; set; }
    }

    public class SocketEntry
    {
        [JsonProperty("socketTypeHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? SocketTypeHash { get; set; }

        [JsonProperty("singleInitialItemHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? SingleInitialItemHash { get; set; }

        [JsonProperty("reusablePlugItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ReusablePlugItem> ReusablePlugItems { get; set; }

        [JsonProperty("preventInitializationOnVendorPurchase", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PreventInitializationOnVendorPurchase { get; set; }

        [JsonProperty("preventInitializationWhenVersioning", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PreventInitializationWhenVersioning { get; set; }

        [JsonProperty("hidePerksInItemTooltip", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HidePerksInItemTooltip { get; set; }

        [JsonProperty("plugSources", NullValueHandling = NullValueHandling.Ignore)]
        public long? PlugSources { get; set; }

        [JsonProperty("overridesUiAppearance", NullValueHandling = NullValueHandling.Ignore)]
        public bool? OverridesUiAppearance { get; set; }

        [JsonProperty("defaultVisible", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DefaultVisible { get; set; }

        [JsonProperty("randomizedPlugSetHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? RandomizedPlugSetHash { get; set; }

        [JsonProperty("reusablePlugSetHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? ReusablePlugSetHash { get; set; }
    }

    public class ReusablePlugItem
    {
        [JsonProperty("plugItemHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? PlugItemHash { get; set; }
    }

    public class SourceData
    {
        [JsonProperty("sourceHashes", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> SourceHashes { get; set; }

        [JsonProperty("sources", NullValueHandling = NullValueHandling.Ignore)]
        public List<Source> Sources { get; set; }

        [JsonProperty("exclusive", NullValueHandling = NullValueHandling.Ignore)]
        public long? Exclusive { get; set; }

        [JsonProperty("vendorSources", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> VendorSources { get; set; }
    }

    public class Source
    {
        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public long? Level { get; set; }

        [JsonProperty("minQuality", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinQuality { get; set; }

        [JsonProperty("maxQuality", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxQuality { get; set; }

        [JsonProperty("minLevelRequired", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinLevelRequired { get; set; }

        [JsonProperty("maxLevelRequired", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxLevelRequired { get; set; }

        [JsonProperty("exclusivity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Exclusivity { get; set; }

        [JsonProperty("computedStats", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, Stat> ComputedStats { get; set; }

        [JsonProperty("sourceHashes", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> SourceHashes { get; set; }
    }

    public class Stat
    {
        [JsonProperty("statHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? StatHash { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public long? Value { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Minimum { get; set; }

        [JsonProperty("maximum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Maximum { get; set; }
    }

    public class Stats
    {
        [JsonProperty("disablePrimaryStatDisplay", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DisablePrimaryStatDisplay { get; set; }

        [JsonProperty("statGroupHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? StatGroupHash { get; set; }

        [JsonProperty("stats", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, Stat> StatsStats { get; set; }

        [JsonProperty("hasDisplayableStats", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasDisplayableStats { get; set; }

        [JsonProperty("primaryBaseStatHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? PrimaryBaseStatHash { get; set; }
    }

    public class TalentGrid
    {
        [JsonProperty("talentGridHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? TalentGridHash { get; set; }

        [JsonProperty("itemDetailString", NullValueHandling = NullValueHandling.Ignore)]
        public string ItemDetailString { get; set; }

        [JsonProperty("hudDamageType", NullValueHandling = NullValueHandling.Ignore)]
        public long? HudDamageType { get; set; }
    }

    public class TranslationBlock
    {
        [JsonProperty("weaponPatternHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? WeaponPatternHash { get; set; }

        [JsonProperty("defaultDyes", NullValueHandling = NullValueHandling.Ignore)]
        public List<DefaultDye> DefaultDyes { get; set; }

        [JsonProperty("lockedDyes", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> LockedDyes { get; set; }

        [JsonProperty("customDyes", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> CustomDyes { get; set; }

        [JsonProperty("arrangements", NullValueHandling = NullValueHandling.Ignore)]
        public List<Arrangement> Arrangements { get; set; }

        [JsonProperty("hasGeometry", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasGeometry { get; set; }
    }

    public class Arrangement
    {
        [JsonProperty("classHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? ClassHash { get; set; }

        [JsonProperty("artArrangementHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? ArtArrangementHash { get; set; }
    }

    public class DefaultDye
    {
        [JsonProperty("channelHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? ChannelHash { get; set; }

        [JsonProperty("dyeHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? DyeHash { get; set; }
    }

    public partial class NDestinyInventoryItemDefinition
    {
        public static NDestinyInventoryItemDefinition FromJson(string json)
        {
            return JsonConvert.DeserializeObject<NDestinyInventoryItemDefinition>(json, Converter.Settings);
        }
    }

    public static class Serialize
    {
        public static string ToJson(this NDestinyInventoryItemDefinition self)
        {
            return JsonConvert.SerializeObject(self, Converter.Settings);
        }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            }
        };
    }
}