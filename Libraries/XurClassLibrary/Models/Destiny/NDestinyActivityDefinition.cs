// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using XurClassLibrary.Models;
//
//    var destinyActivityDefinition = DestinyActivityDefinition.FromJson(jsonString);

using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace XurClassLibrary.Models.Destiny.NDestinyActivityDefinition
{
    public partial class NDestinyActivityDefinition
    {
        [JsonProperty("displayProperties", NullValueHandling = NullValueHandling.Ignore)]
        public DisplayProperties DisplayProperties { get; set; }

        [JsonProperty("originalDisplayProperties", NullValueHandling = NullValueHandling.Ignore)]
        public DisplayProperties OriginalDisplayProperties { get; set; }

        [JsonProperty("selectionScreenDisplayProperties", NullValueHandling = NullValueHandling.Ignore)]
        public DisplayProperties SelectionScreenDisplayProperties { get; set; }

        [JsonProperty("releaseIcon", NullValueHandling = NullValueHandling.Ignore)]
        public string ReleaseIcon { get; set; }

        [JsonProperty("releaseTime", NullValueHandling = NullValueHandling.Ignore)]
        public long? ReleaseTime { get; set; }

        [JsonProperty("activityLevel", NullValueHandling = NullValueHandling.Ignore)]
        public long? ActivityLevel { get; set; }

        [JsonProperty("completionUnlockHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? CompletionUnlockHash { get; set; }

        [JsonProperty("activityLightLevel", NullValueHandling = NullValueHandling.Ignore)]
        public long? ActivityLightLevel { get; set; }

        [JsonProperty("destinationHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? DestinationHash { get; set; }

        [JsonProperty("placeHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? PlaceHash { get; set; }

        [JsonProperty("activityTypeHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? ActivityTypeHash { get; set; }

        [JsonProperty("tier", NullValueHandling = NullValueHandling.Ignore)]
        public long? Tier { get; set; }

        [JsonProperty("pgcrImage", NullValueHandling = NullValueHandling.Ignore)]
        public string PgcrImage { get; set; }

        [JsonProperty("rewards", NullValueHandling = NullValueHandling.Ignore)]
        public List<Reward> Rewards { get; set; }

        [JsonProperty("modifiers", NullValueHandling = NullValueHandling.Ignore)]
        public List<Modifier> Modifiers { get; set; }

        [JsonProperty("isPlaylist", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsPlaylist { get; set; }

        [JsonProperty("challenges", NullValueHandling = NullValueHandling.Ignore)]
        public List<Challenge> Challenges { get; set; }

        [JsonProperty("optionalUnlockStrings", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> OptionalUnlockStrings { get; set; }

        [JsonProperty("inheritFromFreeRoam", NullValueHandling = NullValueHandling.Ignore)]
        public bool? InheritFromFreeRoam { get; set; }

        [JsonProperty("suppressOtherRewards", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SuppressOtherRewards { get; set; }

        [JsonProperty("playlistItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> PlaylistItems { get; set; }

        [JsonProperty("matchmaking", NullValueHandling = NullValueHandling.Ignore)]
        public Matchmaking Matchmaking { get; set; }

        [JsonProperty("directActivityModeHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? DirectActivityModeHash { get; set; }

        [JsonProperty("directActivityModeType", NullValueHandling = NullValueHandling.Ignore)]
        public long? DirectActivityModeType { get; set; }

        [JsonProperty("loadouts", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> Loadouts { get; set; }

        [JsonProperty("activityModeHashes", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> ActivityModeHashes { get; set; }

        [JsonProperty("activityModeTypes", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> ActivityModeTypes { get; set; }

        [JsonProperty("isPvP", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsPvP { get; set; }

        [JsonProperty("insertionPoints", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> InsertionPoints { get; set; }

        [JsonProperty("activityLocationMappings", NullValueHandling = NullValueHandling.Ignore)]
        public List<object> ActivityLocationMappings { get; set; }

        [JsonProperty("hash", NullValueHandling = NullValueHandling.Ignore)]
        public long? Hash { get; set; }

        [JsonProperty("index", NullValueHandling = NullValueHandling.Ignore)]
        public long? Index { get; set; }

        [JsonProperty("redacted", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        [JsonProperty("blacklisted", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Blacklisted { get; set; }
    }

    public class Challenge
    {
        [JsonProperty("rewardSiteHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? RewardSiteHash { get; set; }

        [JsonProperty("inhibitRewardsUnlockHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? InhibitRewardsUnlockHash { get; set; }

        [JsonProperty("objectiveHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? ObjectiveHash { get; set; }

        [JsonProperty("dummyRewards", NullValueHandling = NullValueHandling.Ignore)]
        public List<DummyReward> DummyRewards { get; set; }
    }

    public class DummyReward
    {
        [JsonProperty("itemHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? ItemHash { get; set; }

        [JsonProperty("quantity", NullValueHandling = NullValueHandling.Ignore)]
        public long? Quantity { get; set; }
    }

    public class DisplayProperties
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [JsonProperty("hasIcon", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasIcon { get; set; }
    }

    public class Matchmaking
    {
        [JsonProperty("isMatchmade", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsMatchmade { get; set; }

        [JsonProperty("minParty", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinParty { get; set; }

        [JsonProperty("maxParty", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxParty { get; set; }

        [JsonProperty("maxPlayers", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxPlayers { get; set; }

        [JsonProperty("requiresGuardianOath", NullValueHandling = NullValueHandling.Ignore)]
        public bool? RequiresGuardianOath { get; set; }
    }

    public class Modifier
    {
        [JsonProperty("activityModifierHash", NullValueHandling = NullValueHandling.Ignore)]
        public long? ActivityModifierHash { get; set; }
    }

    public class Reward
    {
        [JsonProperty("rewardItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<DummyReward> RewardItems { get; set; }
    }

    public partial class NDestinyActivityDefinition
    {
        public static NDestinyActivityDefinition FromJson(string json)
        {
            return JsonConvert.DeserializeObject<NDestinyActivityDefinition>(json, Converter.Settings);
        }
    }

    public static class Serialize
    {
        public static string ToJson(this NDestinyActivityDefinition self)
        {
            return JsonConvert.SerializeObject(self, Converter.Settings);
        }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            }
        };
    }
}