// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using XurClassLibrary.Models.Destiny.NDestinyInventoryBucketDefinition;
//
//    var nDestinyInventoryBucketDefinition = NDestinyInventoryBucketDefinition.FromJson(jsonString);

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace XurClassLibrary.Models.Destiny.NDestinyInventoryBucketDefinition
{
    public partial class NDestinyInventoryBucketDefinition
    {
        [JsonProperty("displayProperties", NullValueHandling = NullValueHandling.Ignore)]
        public DisplayProperties DisplayProperties { get; set; }

        [JsonProperty("scope", NullValueHandling = NullValueHandling.Ignore)]
        public long? Scope { get; set; }

        [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
        public long? Category { get; set; }

        [JsonProperty("bucketOrder", NullValueHandling = NullValueHandling.Ignore)]
        public long? BucketOrder { get; set; }

        [JsonProperty("itemCount", NullValueHandling = NullValueHandling.Ignore)]
        public long? ItemCount { get; set; }

        [JsonProperty("location", NullValueHandling = NullValueHandling.Ignore)]
        public long? Location { get; set; }

        [JsonProperty("hasTransferDestination", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasTransferDestination { get; set; }

        [JsonProperty("enabled", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        [JsonProperty("fifo", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Fifo { get; set; }

        [JsonProperty("hash", NullValueHandling = NullValueHandling.Ignore)]
        public long? Hash { get; set; }

        [JsonProperty("index", NullValueHandling = NullValueHandling.Ignore)]
        public long? Index { get; set; }

        [JsonProperty("redacted", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Redacted { get; set; }

        [JsonProperty("blacklisted", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Blacklisted { get; set; }
    }

    public class DisplayProperties
    {
        [JsonProperty("hasIcon", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasIcon { get; set; }
    }

    public partial class NDestinyInventoryBucketDefinition
    {
        public static NDestinyInventoryBucketDefinition FromJson(string json)
        {
            return JsonConvert.DeserializeObject<NDestinyInventoryBucketDefinition>(json, Converter.Settings);
        }
    }

    public static class Serialize
    {
        public static string ToJson(this NDestinyInventoryBucketDefinition self)
        {
            return JsonConvert.SerializeObject(self, Converter.Settings);
        }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            }
        };
    }
}